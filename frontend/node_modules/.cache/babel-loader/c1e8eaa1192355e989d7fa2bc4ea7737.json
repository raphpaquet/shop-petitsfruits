{"ast":null,"code":"import _toConsumableArray from\"/Users/raphaellepaquet/lighthouse/shop-petitsfruits/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/raphaellepaquet/lighthouse/shop-petitsfruits/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CART_ADD_ITEM// CART_ADD_ITEM_FAIL,\n,CART_EMPTY,CART_REMOVE_ITEM,CART_SAVE_PAYMENT_METHOD,CART_SAVE_SHIPPING_ADDRESS}from'../constants/cartConstants';export var cartReducer=function cartReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{cartItems:[]};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case CART_ADD_ITEM:var item=action.payload;// Look if we already have the item in the cart (product = product.id)\nvar existItem=state.cartItems.find(function(x){return x.product===item.product;});if(existItem){// if the item exist, we compare the id, if it's the same id, we replace by the newer item (item) else we don't change anything in the array, we put the x\nreturn _objectSpread(_objectSpread({},state),{},{error:'',cartItems:state.cartItems.map(function(x){return x.product===existItem.product?item:x;})});}else{// if item doesn't exist => we concatenate the last version of cart item with the new item\nreturn _objectSpread(_objectSpread({},state),{},{error:'',cartItems:[].concat(_toConsumableArray(state.cartItems),[item])});}case CART_REMOVE_ITEM:return _objectSpread(_objectSpread({},state),{},{error:'',cartItems:state.cartItems.filter(function(x){return x.product!==action.payload;})});case CART_SAVE_SHIPPING_ADDRESS:return _objectSpread(_objectSpread({},state),{},{shippingAddress:action.payload});case CART_SAVE_PAYMENT_METHOD:return _objectSpread(_objectSpread({},state),{},{paymentMethod:action.payload});// case CART_ADD_ITEM_FAIL:\n//   return { ...state, error: action.payload };\ncase CART_EMPTY:return _objectSpread(_objectSpread({},state),{},{error:'',cartItems:[]});default:return state;}};","map":{"version":3,"sources":["/Users/raphaellepaquet/lighthouse/shop-petitsfruits/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_EMPTY","CART_REMOVE_ITEM","CART_SAVE_PAYMENT_METHOD","CART_SAVE_SHIPPING_ADDRESS","cartReducer","state","cartItems","action","type","item","payload","existItem","find","x","product","error","map","filter","shippingAddress","paymentMethod"],"mappings":"qSAAA,OACEA,aACA;AAFF,CAGEC,UAHF,CAIEC,gBAJF,CAKEC,wBALF,CAMEC,0BANF,KAOO,4BAPP,CASA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAuC,IAAtCC,CAAAA,KAAsC,2DAA9B,CAAEC,SAAS,CAAE,EAAb,CAA8B,IAAXC,CAAAA,MAAW,2CAChE,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKT,CAAAA,aAAL,CACE,GAAMU,CAAAA,IAAI,CAAGF,MAAM,CAACG,OAApB,CACA;AACA,GAAMC,CAAAA,SAAS,CAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,OAAF,GAAcL,IAAI,CAACK,OAA1B,EAArB,CAAlB,CACA,GAAIH,SAAJ,CAAe,CACb;AACA,sCACKN,KADL,MAEEU,KAAK,CAAE,EAFT,CAGET,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAoB,SAACH,CAAD,QAC7BA,CAAAA,CAAC,CAACC,OAAF,GAAcH,SAAS,CAACG,OAAxB,CAAkCL,IAAlC,CAAyCI,CADZ,EAApB,CAHb,GAOD,CATD,IASO,CACJ;AACD,sCAAYR,KAAZ,MAAmBU,KAAK,CAAE,EAA1B,CAA8BT,SAAS,8BAAMD,KAAK,CAACC,SAAZ,GAAuBG,IAAvB,EAAvC,GACD,CACH,IAAKR,CAAAA,gBAAL,CACE,sCACKI,KADL,MAEEU,KAAK,CAAE,EAFT,CAGET,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuB,SAACJ,CAAD,QAAOA,CAAAA,CAAC,CAACC,OAAF,GAAcP,MAAM,CAACG,OAA5B,EAAvB,CAHb,GAKF,IAAKP,CAAAA,0BAAL,CACE,sCAAYE,KAAZ,MAAmBa,eAAe,CAAEX,MAAM,CAACG,OAA3C,GACF,IAAKR,CAAAA,wBAAL,CACE,sCAAYG,KAAZ,MAAmBc,aAAa,CAAEZ,MAAM,CAACG,OAAzC,GACF;AACA;AACA,IAAKV,CAAAA,UAAL,CACE,sCAAYK,KAAZ,MAAmBU,KAAK,CAAE,EAA1B,CAA8BT,SAAS,CAAE,EAAzC,GACF,QACE,MAAOD,CAAAA,KAAP,CAjCJ,CAmCD,CApCM","sourcesContent":["import {\n  CART_ADD_ITEM,\n  // CART_ADD_ITEM_FAIL,\n  CART_EMPTY,\n  CART_REMOVE_ITEM,\n  CART_SAVE_PAYMENT_METHOD,\n  CART_SAVE_SHIPPING_ADDRESS,\n} from '../constants/cartConstants';\n\nexport const cartReducer = (state = { cartItems: [] }, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      // Look if we already have the item in the cart (product = product.id)\n      const existItem = state.cartItems.find((x) => x.product === item.product);\n      if (existItem) {\n        // if the item exist, we compare the id, if it's the same id, we replace by the newer item (item) else we don't change anything in the array, we put the x\n        return {\n          ...state,\n          error: '',\n          cartItems: state.cartItems.map((x) =>\n            x.product === existItem.product ? item : x\n          ),\n        };\n      } else {\n         // if item doesn't exist => we concatenate the last version of cart item with the new item\n        return { ...state, error: '', cartItems: [...state.cartItems, item] };\n      }\n    case CART_REMOVE_ITEM:\n      return {\n        ...state,\n        error: '',\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload),\n      };\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state, shippingAddress: action.payload };\n    case CART_SAVE_PAYMENT_METHOD:\n      return { ...state, paymentMethod: action.payload };\n    // case CART_ADD_ITEM_FAIL:\n    //   return { ...state, error: action.payload };\n    case CART_EMPTY:\n      return { ...state, error: '', cartItems: [] };\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}